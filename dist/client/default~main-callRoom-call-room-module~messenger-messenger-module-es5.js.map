{"version":3,"sources":["node_modules/howler/dist/howler.js"],"names":[],"mappings":"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","sourcesContent":["/*!\n *  howler.js v2.2.0\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.0\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"],"sourceRoot":"webpack:///","file":"default~main-callRoom-call-room-module~messenger-messenger-module-es5.js"}